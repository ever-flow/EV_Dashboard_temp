
# 산업 PER 통계 계산 함수
def compute_industry_per_stats(df, method, industry_cols):
    industries = df[industry_cols].stack().dropna().unique()
    per_values = {}
    for ind in industries:
        mask = df[industry_cols].apply(lambda r: ind in r.values, axis=1)
        if method == 'AGG':
            sub = df.loc[mask & df['Net Income (LTM)'].notna()]
            if sub.empty:
                per_values[ind] = np.nan
                continue
            q1 = sub['market_cap'].quantile(0.25)
            q3 = sub['market_cap'].quantile(0.75)
            iqr = q3 - q1
            lower_bound = q1 - 2 * iqr
            upper_bound = q3 + 2 * iqr
            sub_filtered = sub[(sub['market_cap'] >= lower_bound) & (sub['market_cap'] <= upper_bound)]
            if sub_filtered.empty:
                per_values[ind] = np.nan
            else:
                total_market_cap = sub_filtered['market_cap'].sum()
                total_net_income = sub_filtered['Net Income (LTM)'].sum()
                per_values[ind] = total_market_cap / total_net_income if total_net_income > 0 else np.nan
        else:
            sub = df.loc[mask & df['Net Income (LTM)'].gt(0) & df['Net Income (LTM)'].notna()]
            if sub.empty:
                per_values[ind] = np.nan
                continue
            per_vals = sub['market_cap'] / sub['Net Income (LTM)']
            if method == 'AVG':
                per_values[ind] = per_vals.mean()
            elif method == 'MED':
                per_values[ind] = per_vals.median()
            elif method == 'HRM':
                per_values[ind] = len(per_vals) / (1.0 / per_vals).sum() if len(per_vals) > 0 else np.nan
    return per_values

# 산업 EV/EBITDA 통계 계산 함수
def compute_industry_ev_ebitda_stats(df, method, industry_cols):
    industries = df[industry_cols].stack().dropna().unique()
    ev_ebitda_values = {}
    for ind in industries:
        mask = df[industry_cols].apply(lambda r: ind in r.values, axis=1)
        if method == 'AGG':
            sub = df.loc[mask & df['EBITDA (LTM)'].notna() & df['Enterprise Value (FQ0)'].notna()]
            if sub.empty:
                ev_ebitda_values[ind] = np.nan
                continue
            q1 = sub['Enterprise Value (FQ0)'].quantile(0.25)
            q3 = sub['Enterprise Value (FQ0)'].quantile(0.75)
            iqr = q3 - q1
            lower_bound = q1 - 2 * iqr
            upper_bound = q3 + 2 * iqr
            sub_filtered = sub[(sub['Enterprise Value (FQ0)'] >= lower_bound) & (sub['Enterprise Value (FQ0)'] <= upper_bound)]
            if sub_filtered.empty:
                ev_ebitda_values[ind] = np.nan
            else:
                total_ev = sub_filtered['Enterprise Value (FQ0)'].sum()
                total_ebitda = sub_filtered['EBITDA (LTM)'].sum()
                ev_ebitda_values[ind] = total_ev / total_ebitda if total_ebitda > 0 else np.nan
        else:
            sub = df.loc[mask & df['EBITDA (LTM)'].gt(0) & df['EBITDA (LTM)'].notna() & df['Enterprise Value (FQ0)'].notna()]
            if sub.empty:
                ev_ebitda_values[ind] = np.nan
                continue
            ev_vals = sub['Enterprise Value (FQ0)'] / sub['EBITDA (LTM)']
            if method == 'AVG':
                ev_ebitda_values[ind] = ev_vals.mean()
            elif method == 'MED':
                ev_ebitda_values[ind] = ev_vals.median()
            elif method == 'HRM':
                ev_ebitda_values[ind] = len(ev_vals) / (1.0 / ev_vals).sum() if len(ev_vals) > 0 else np.nan
    return ev_ebitda_values

# 도메인 및 시간 기반 피처 엔지니어링 클래스
class DomainFeatureEngineer(BaseEstimator, TransformerMixin):
    def fit(self, X, y=None):
        Xt = self._transform(X.copy())
        self.cols_ = Xt.columns.tolist()
        return self

    def transform(self, X):
        Xt = self._transform(X.copy())
        return Xt.reindex(columns=self.cols_, fill_value=0)

    def _transform(self, X):
        X = X.drop('market', axis=1, errors='ignore')
        tcols = [c for c in X.columns if '(' in c and 'LTM' in c]
        tf = {}
        for c in tcols:
            base, per = c.split(' (')
            tf.setdefault(base, {})[per.rstrip(')')] = c

        if 'EBIT' in tf and 'Depreciation' in tf:
            for p, e in tf['EBIT'].items():
                d = tf['Depreciation'].get(p)
                if d:
                    X[f'EBITDA ({p})'] = X[e] + X[d]
            tf['EBITDA'] = {p: f'EBITDA ({p})' for p in tf['EBIT']}

        bases = ['Total Assets', 'Total Liabilities', 'Equity', 'Net Debt',
                 'Revenue', 'EBIT', 'EBITDA', 'Net Income', 'Net Income After Minority', 'Dividends']

        def safe_div(a, b):
            return a.div(b.replace({0: np.nan}))

        for v in bases:
            periods = tf.get(v, {})
            seq = [p for p in ['LTM-3', 'LTM-2', 'LTM-1', 'LTM'] if p in periods]
            grs = []
            for i in range(1, len(seq)):
                prev, curr = seq[i-1], seq[i]
                r = safe_div(X[periods[curr]] - X[periods[prev]], X[periods[prev]])
                suffix = '-2' if (prev, curr) == ('LTM-3', 'LTM-2') else '-1' if (prev, curr) == ('LTM-2', 'LTM-1') else ''
                X[f'{v}_growth{suffix}'] = r
                grs.append(r)
            if grs:
                X[f'{v}_avg_growth'] = pd.concat(grs, axis=1).mean(axis=1)
                X[f'{v}_volatility'] = X[[periods[p] for p in seq]].std(axis=1)
            if 'LTM-3' in periods and 'LTM' in periods:
                X[f'{v}_CAGR'] = np.where(
                    X[periods['LTM-3']] > 0,
                    (X[periods['LTM']] / X[periods['LTM-3']])**(1/3) - 1,
                    np.nan
                )

        def calc(a, b, name, per):
            if per in tf.get(a, {}) and per in tf.get(b, {}):
                X[f'{name} ({per})'] = safe_div(X[tf[a][per]], X[tf[b][per]])

        ratios = [
            ('Equity', 'Total Assets', 'BAR'),
            ('Total Liabilities', 'Equity', 'DBR'),
            ('Revenue', 'Total Assets', 'SAR'),
            ('EBIT', 'Revenue', 'OMR'),
            ('EBITDA', 'Revenue', 'EMR'),
            ('Net Income', 'Total Assets', 'EAR'),
            ('Net Income', 'Equity', 'EBR')
        ]
        for p in ['LTM', 'LTM-1', 'LTM-2', 'LTM-3']:
            for a, b, n in ratios:
                calc(a, b, n, p)
            if p in ['LTM-2', 'LTM-1', 'LTM']:
                ni = tf.get('Net Income After Minority', {}).get(p)
                eq = tf.get('Equity', {}).get(p)
                prev = {'LTM-2': 'LTM-3', 'LTM-1': 'LTM-2', 'LTM': 'LTM-1'}[p]
                ep = tf.get('Equity', {}).get(prev)
                if ni and eq and ep:
                    avg_eq = (X[eq] + X[ep]) / 2
                    X[f'ROE ({p})'] = safe_div(X[ni], avg_eq)

        ratio_bases = ['BAR', 'DBR', 'SAR', 'OMR', 'EMR', 'EAR', 'EBR', 'ROE']
        for v in ratio_bases:
            periods = {p: f'{v} ({p})' for p in ['LTM-3', 'LTM-2', 'LTM-1', 'LTM'] if f'{v} ({p})' in X.columns}
            seq = [p for p in ['LTM-3', 'LTM-2', 'LTM-1', 'LTM'] if p in periods]
            grs = []
            for i in range(1, len(seq)):
                prev, curr = seq[i-1], seq[i]
                r = safe_div(X[periods[curr]] - X[periods[prev]], X[periods[prev]])
                suffix = '-2' if (prev, curr) == ('LTM-3', 'LTM-2') else '-1' if (prev, curr) == ('LTM-2', 'LTM-1') else ''
                X[f'{v}_growth{suffix}'] = r
                grs.append(r)
            if grs:
                X[f'{v}_avg_growth'] = pd.concat(grs, axis=1).mean(axis=1)
                X[f'{v}_volatility'] = X[[periods[p] for p in seq]].std(axis=1)
            if 'LTM-3' in periods and 'LTM' in periods:
                X[f'{v}_CAGR'] = np.where(
                    X[periods['LTM-3']] > 0,
                    (X[periods['LTM']] / X[periods['LTM-3']])**(1/3) - 1,
                    np.nan
                )

        dep_cols = [c for c in X.columns if c.startswith('Depreciation')]
        if dep_cols:
            X.drop(columns=dep_cols, inplace=True)

        return X


# 최적화된 LightGBM 퀀타일 모델 실행
def quick_lightgbm_quantile(df, name, industry_cols):
    df = df.copy()

    if 'EBITDA (LTM)' not in df and 'EBIT (LTM)' in df and 'Depreciation (LTM)' in df:
        df['EBITDA (LTM)'] = df['EBIT (LTM)'] + df['Depreciation (LTM)']

    df['Listing_Age_Days'] = (pd.to_datetime('2024-12-31') - pd.to_datetime(df['Listing Date'])).dt.days
    df.drop(columns=['Listing Date'], inplace=True)

